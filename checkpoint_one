import cv2
import mediapipe as mp
import pyautogui
import numpy as np
import random

i = 0
p1_fitness = 0
p2_fitness = 0
chromosome = [0]*12
rows = 12
columns = 2
current = [[1]*columns]*rows
parent1 = [[0]*columns]*rows
parent2 = [[0]*columns]*rows

points = [252, 253, 259, 256, 362, 398, 382, 384, 381, 386, 260, 466, 249,
          390, 373, 374, 263, 388, 387, 380, 385, 258, 257, 254]

expected_values = [[0, 0.5], [0.25, 0.5], [0.5, 0.5], [0.75, 0.5], [1, 0.5],
                   [0.5, 0], [0.5, 0.25], [0.5, 0.75], [0.5, 1]]

for top in range(10):
    for x in range(12):
        random_index = random.randrange(0, 24)
        chromosome[x] = points[random_index]
        print(x, points[random_index])

    var = ['potato_face', 'download']

    img = cv2.imread('C:\\Users\\Prasanna\\Desktop\\custom dataset\\' + var[0] + '.jpg')

    face_mesh = mp.solutions.face_mesh.FaceMesh(refine_landmarks=True)
    rgb_frame = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    output = face_mesh.process(rgb_frame)
    landmark_points = output.multi_face_landmarks
    frame_h, frame_w, _ = img.shape
    screen_w, screen_h = pyautogui.size()

    if landmark_points:
        landmarks = landmark_points[0].landmark
        x_pupil = landmarks[473].x
        y_pupil = landmarks[473].y

        right = [landmarks[473]]
        for landmark in right:
            x = int(landmark.x * frame_w)
            y = int(landmark.y * frame_h)
            cv2.circle(img, (x, y), 3, (255, 0, 0))

        for feature in chromosome:
            x = int(landmarks[feature].x * frame_w)
            y = int(landmarks[feature].y * frame_h)
            current[i][0] = landmarks[feature].x
            current[i][1] = landmarks[feature].y
            print(current[i][0], current[i][1])
            cv2.circle(img, (x, y), 3, (255, 0, 0))

        x_min = (landmarks[chromosome[0]].x + landmarks[chromosome[1]].x + landmarks[chromosome[2]].x) / 3
        x_max = (landmarks[chromosome[3]].x + landmarks[chromosome[4]].x + landmarks[chromosome[5]].x) / 3
        y_min = (landmarks[chromosome[6]].y + landmarks[chromosome[7]].y + landmarks[chromosome[8]].y) / 3
        y_max = (landmarks[chromosome[9]].y + landmarks[chromosome[10]].y + landmarks[chromosome[11]].y) / 3

        eye_width = abs(x_max - x_min)
        eye_height = abs(y_max - y_min)

        x_cord_pred = abs(x_pupil - x_min) / eye_width
        y_cord_pred = abs(y_pupil - y_min) / eye_height

        screen_x = screen_w * x_cord_pred
        screen_y = screen_h * y_cord_pred

        x_actual = expected_values[2][0]
        y_actual = expected_values[2][1]

        error_x = abs(x_actual - x_cord_pred)*100 / x_actual  #fitness function
        error_y = abs(y_actual - y_cord_pred)*100 / y_actual
        print("error values in run ", top+1, " are")
        print(error_x, error_y)

    cv2.imshow('Eye Controlled Mouse', img)
    cv2.waitKey(0)
    cv2.destroyAllWindows();


            if fitness > p1_fitness and fitness > p2_fitness:
                parent2 = parent1
                p2_fitness = p1_fitness
                parent1 = current
                p1_fitness = fitness

            if p1_fitness > fitness > p2_fitness:
                parent2 = current
                p2_fitness = fitness